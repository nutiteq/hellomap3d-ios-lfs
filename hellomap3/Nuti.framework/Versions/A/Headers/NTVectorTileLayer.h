/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTTileData.h"
#import "NTTileDataSource.h"
#import "NTTileLayer.h"
#import "NTVectorTileDecoder.h"

/**
 * A tile layer where each tile is a bitmap. Should be used together with corresponding data source.
 */
__attribute__ ((visibility("default"))) @interface NTVectorTileLayer : NTTileLayer
-(void*)getCptr;
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * Constructs a VectorTileLayer object from a data source and tile decoder.<br>
 * @param dataSource The data source from which this layer loads data.<br>
 * @param decoder The tile decoder that decoder loaded tiles and applies styles.
 */
-(id)initWithDataSource: (NTTileDataSource*)dataSource decoder: (NTVectorTileDecoder*)decoder;
/**
 * Returns the tile decoder assigned to this layer.<br>
 * @return The tile decoder assigned to this layer.
 */
-(NTVectorTileDecoder*)getTileDecoder;
/**
 * Returns the tile cache capacity.<br>
 * @return The tile cache capacity in bytes.
 */
-(unsigned int)getTileCacheCapacity;
/**
 * Sets the vector tile cache capacity. Tile cache is the primary storage for vector data,<br>
 * all tiles contained within the cache are stored as uncompressed vertex buffers and can immediately be<br>
 * drawn to the screen. Setting the cache size too small may cause artifacts, such as disappearing tiles.<br>
 * The more tiles are visible on the screen, the larger this cache should be. <br>
 * The default is 10MB, which should be enough for most use cases with preloading enabled. If preloading is<br>
 * disabled, the cache size should be reduced by the user to conserve memory.<br>
 * @return The new tile bitmap cache capacity in bytes.
 */
-(void)setTileCacheCapacity: (unsigned int)capacityInBytes;
-(void)clearTileCaches: (BOOL)all;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

