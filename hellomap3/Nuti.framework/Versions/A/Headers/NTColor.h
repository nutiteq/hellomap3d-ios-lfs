/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif

/**
 * A color represented in RGBA space, alpha is expected to be non-premultiplied.
 */
__attribute__ ((visibility("default"))) @interface NTColor : NSObject
{
  void *swigCPtr;
  BOOL swigCMemOwn;
}
-(void*)getCptr;
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**  
 * Checks if this object is equal to the specified object.
 * @return True when objects are equal, false otherwise.
 */
-(BOOL)isEqual:(id)object;

/**
 * Returns the hash value of this object.
 * @return The hash value of this object.
 */
-(NSUInteger)hash;

/**
 * Constructs a completely opaque black color object.
 */
-(id)init;
/**
 * Constructs a map color object from the red, green, blue and alpha components.<br>
 * Alpha component is interpreted as non-premultiplied transparency value,<br>
 * thus to make half-transparent green, use Color(0, 255, 0, 128).<br>
 * @param r The red component. Must be between 0 and 255.<br>
 * @param g The green component. Must be between 0 and 255.<br>
 * @param b The blue component. Must be between 0 and 255.<br>
 * @param a The alpha component. Must be between 0 and 255.
 */
-(id)initWithR: (unsigned char)r g: (unsigned char)g b: (unsigned char)b a: (unsigned char)a;
/**
 * Constructs a map color object from a 32-bit encoded integer. The format is expected to be ARGB.<br>
 * @param color The color encoded into 32-bit integer as ARGB.
 */
-(id)initWithColor: (int)color;
/**
 * Checks for equality between this and another map color.<br>
 * @param color The other map vector.<br>
 * @return True if equal.
 */
-(BOOL)isEqualInternal: (NTColor*)color;
/**
 * Returns the red component of this map color.<br>
 * @return The red component in the [0..255] range.
 */
-(unsigned char)getR;
/**
 * Returns the green component of this map color.<br>
 * @return The green component in the [0..255] range.
 */
-(unsigned char)getG;
/**
 * Returns the blue component of this map color.<br>
 * @return The blue component in the [0..255] range.
 */
-(unsigned char)getB;
/**
 * Returns the alpha component of this map color.<br>
 * @return The alpha component in the [0..255] range.
 */
-(unsigned char)getA;
/**
 * Encodes this map color into 32-bit integer value (ARGB format).<br>
 * @return The encoded 32-bit integer representation of this map color.
 */
-(int)getARGB;
/**
 * Returns the hash value of this object.<br>
 * @return The hash value of this object.
 */
-(int)hashInternal;
/**
 * Creates a string representation of this map color, useful for logging.<br>
 * @return The string representation of this map color.
 */
-(NSString*)description;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

