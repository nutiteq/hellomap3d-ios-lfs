/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTScreenPos.h"

/**
 * A container class that defines a bounding box on the screen using minimum and maximum screen positions.
 */
__attribute__ ((visibility("default"))) @interface NTScreenBounds : NSObject
{
  void *swigCPtr;
  BOOL swigCMemOwn;
}
-(void*)getCptr;
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**  
 * Checks if this object is equal to the specified object.
 * @return True when objects are equal, false otherwise.
 */
-(BOOL)isEqual:(id)object;

/**
 * Returns the hash value of this object.
 * @return The hash value of this object.
 */
-(NSUInteger)hash;

/**
 * Constructs an empty ScreenBounds object. The coordinates of the minimum position will be<br>
 * set to positive infinity and the coordinates of the maximum position will be<br>
 * set to negative infinity.
 */
-(id)init;
/**
 * Constructs a ScreenBounds object from a minimum and maximum position. If a coordinate of the<br>
 * minimum positon is larger than the same coordinate of the maximum position then those<br>
 * coordinates will be swapped.<br>
 * @param min The minimum position.<br>
 * @param max The maximum position.
 */
-(id)initWithMin: (NTScreenPos*)min max: (NTScreenPos*)max;
/**
 * Checks for equality between this and another screen bounds object.<br>
 * @param ScreenBounds The other screen bounds object.<br>
 * @return True if equal.
 */
-(BOOL)isEqualInternal: (NTScreenBounds*)ScreenBounds;
/**
 * Calculates the center screen position of this screen envelope object.<br>
 * @return The center postion if this screen envelope object.
 */
-(NTScreenPos*)getCenter;
/**
 * Returns the width of the bounds object.<br>
 * @return The width on the bounds object.
 */
-(float)getWidth;
/**
 * Returns the height of the bounds object.<br>
 * @return The height on the bounds object.
 */
-(float)getHeight;
/**
 * Returns the minimum screen position.<br>
 * @return The minimum screen position.
 */
-(NTScreenPos*)getMin;
/**
 * Returns the maximum screen position of this screen envelope object.<br>
 * @return The maximum screen position of this screen envelope object.
 */
-(NTScreenPos*)getMax;
/**
 * Tests whether this screen bounds object contains a screen position.<br>
 * @param pos The screen position.<br>
 * @return True if this screen bounds object contains the screen position.
 */
-(BOOL)containsPos: (NTScreenPos*)pos;
/**
 * Tests whether this screen bounds object contains a another screen bounds object.<br>
 * @param bounds The other screen bounds object.<br>
 * @return True if this screen bounds object contains the other screen bounds object.
 */
-(BOOL)containsBounds: (NTScreenBounds*)bounds;
/**
 * Tests whether this screen bounds object intersects with a another screen bounds object.<br>
 * @param bounds The other screen bounds object.<br>
 * @return True if this screen bounds object intersects with the other screen bounds object.
 */
-(BOOL)intersects: (NTScreenBounds*)bounds;
/**
 * Returns the hash value of this object.<br>
 * @return The hash value of this object.
 */
-(int)hashInternal;
/**
 * Creates a string representation of this screen bounds object, useful for logging.<br>
 * @return The string representation of this screen bounds object.
 */
-(NSString*)description;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

