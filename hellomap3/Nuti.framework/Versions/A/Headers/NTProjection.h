/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTMapBounds.h"
#import "NTMapPos.h"

/**
 * An abstract base class for all projections.
 */
__attribute__ ((visibility("default"))) @interface NTProjection : NSObject
{
  void *swigCPtr;
  BOOL swigCMemOwn;
}
-(void*)getCptr;
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**  
 * Checks if this object is equal to the specified object.
 * @return True when objects are equal, false otherwise.
 */
-(BOOL)isEqual:(id)object;

/**
 * Returns the hash value of this object.
 * @return The hash value of this object.
 */
-(NSUInteger)hash;


+(NTProjection*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Returns the actual class name of this vector element. This is used<br>
 * for dynamically creating Java and ObjC proxy classes, because Swig can't automatically<br>
 * generate child proxy classes from a base class pointer.<br>
 * @return The class name of this vector element.
 */
-(NSString*)getClassName;
/**
 * Returns the bounds of this projection.<br>
 * @return The bounds of this projection.
 */
-(NTMapBounds*)getBounds;
/**
 * Returns local scale for the specified position.<br>
 * @param pos The position in the internal coordinate system.<br>
 * @return The local scale for the specified position.
 */
-(double)getLocalScale: (NTMapPos*)pos;
/**
 * Converts internal size to meters at the equator.<br>
 * @param size The size in the internal coordinate system.<br>
 * @return The approximate size in meters at the equator.
 */
-(double)fromInternalScale: (double)size;
/**
 * Transforms a position from the WGS84 coordinate system to the coordinate system of this projection.<br>
 * @param pos The position in the WGS84 coordinate system.<br>
 * @return The transformed position in the coordinate system of this projection.
 */
-(NTMapPos*)fromWgs84: (NTMapPos*)pos;
/**
 * Transforms a position from the coordinate system of this projection to the WGS84 coordinate system.<br>
 * @param pos The position in the coordinate system of this projection.<br>
 * @return The transformed position in the WGS84 coordinate system.
 */
-(NTMapPos*)toWgs84: (NTMapPos*)pos;
/**
 * Return name of this projection in Well-Known format. For example, as "EPSG:3857"<br>
 * @return The name of this projection.
 */
-(NSString*)getName;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

