/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTBitmap.h"
#import "NTLineStyle.h"
#import "NTStyleBuilder.h"

/**
 * A builder class for LineStyle.
 */
__attribute__ ((visibility("default"))) @interface NTLineStyleBuilder : NTStyleBuilder
-(void*)getCptr;
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * Constructs a LineStyleBuilder object with all parameters set to defaults.
 */
-(id)init;
/**
 * Returns the bitmap of the line.<br>
 * @return The bitmap of the line.
 */
-(NTBitmap*)getBitmap;
/**
 * Sets the bitmap that will be used for drawing the line. The bitmap will be stretched<br>
 * horizontally to match the width of the line and repeated vertically along the lengtht of the line.<br>
 * The default is "default_line.png".<br>
 * @param bitmap The new bitmap for the line.
 */
-(void)setBitmap: (NTBitmap*)bitmap;
/**
 * Returns the width of the line used for click detection.<br>
 * @return The width of the line used for click detection.
 */
-(float)getClickWidth;
/**
 * Sets the width for the line that will be used for click detection.<br>
 * Units are screen density independent pixels (DP or DIP). If set to -1 the click width will be<br>
 * calculated automatically. The default is -1.<br>
 * @param clickWidth The new point size in dp.
 */
-(void)setClickWidth: (float)clickWidth;
/**
 * Returns the end point type of the line.<br>
 * @return The end point type of the line.
 */
-(enum NTLineEndType)getLineEndType;
/**
 * Sets the style in which the end points of the line will be drawn. The default is LineEndType::ROUND.<br>
 * @param lineEndType The new line end point type.
 */
-(void)setLineEndType: (enum NTLineEndType)lineEndType;
/**
 * Returns the joint type of the line.<br>
 * @return The joint type of the line.
 */
-(enum NTLineJointType)getLineJointType;
/**
 * Sets the style in which the line segments will be connected with each other. The default is LineJointType::ROUND.<br>
 * @param lineJointType The new line joint type.
 */
-(void)setLineJointType: (enum NTLineJointType)lineJointType;
/**
 * Returns the stretch factor of the line.<br>
 * @return The stretch factor of the line.
 */
-(float)getStretchFactor;
/**
 * Sets the relative stretching coefficient for the line. The bitmap of the line will be stretched <br>
 * vertically by the stretch factor and then repeated along the length of the line. For example, <br>
 * setting the stretch factor to 2.0 will stretch the bitmap vertically to double the original height <br>
 * and reduces the number of times the bitmap gets repeated by half. The default is 1.0.<br>
 * @param stretchFactor The new relative stretching coefficient for the line.
 */
-(void)setStretchFactor: (float)stretchFactor;
/**
 * Returns the width of the line.<br>
 * @return The width of the line in dp.
 */
-(float)getWidth;
/**
 * Sets the width of line in screen density independent pixels (DP or DIP). The default is 12.<br>
 * @param width The new line width in dp.
 */
-(void)setWidth: (float)width;
/**
 * Builds a new instance of the LineStyle object using previously set parameters.<br>
 * @return A new LineStyle object.
 */
-(NTLineStyle*)buildStyle;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

