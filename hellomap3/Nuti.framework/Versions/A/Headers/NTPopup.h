/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTMapPos.h"
#import "NTScreenPos.h"
#import "NTBitmap.h"
#import "NTGeometry.h"
#import "NTPointGeometry.h"
#import "NTPopupStyle.h"
#import "NTBillboard.h"

/**
 * An abstract billboard element that can be displayed on the map. It<br>
 * always faces the camera and has a dynamically drawn bitmap.
 */
__attribute__ ((visibility("default"))) @interface NTPopup : NTBillboard
-(void*)getCptr;
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * Constructs an abstract Popup object with the specified style and attaches it to a billboard element.<br>
 * @param baseBillboard The billboard this popup will be attached to.<br>
 * @param style The style that defines what this popup looks like.
 */
-(id)initWithBaseBillboard: (NTBillboard*)baseBillboard style: (NTPopupStyle*)style;
/**
 * Constructs an abstract Popup object from a geometry object and a style.<br>
 * @param geometry The geometry object that defines the location of this popup.<br>
 * @param style The style that defines what this popup looks like.
 */
-(id)initWithGeometry: (NTGeometry*)geometry style: (NTPopupStyle*)style;
/**
 * Constructs an abstract Popup object from a map position and a style.<br>
 * @param pos The map position that defines the location of this popup.<br>
 * @param style The style that defines what this popup looks like.
 */
-(id)initWithPos: (NTMapPos*)pos style: (NTPopupStyle*)style;
/**
 * Draws a custom bitmap for this Popup that will be used for drawing the Popup on the map.<br>
 * The method is called each time the Popup gets reloaded internally.<br>
 * @param anchorScreenPos The screen position of the anchor point of this popup in pixels.<br>
 * @param screenWidth The current screen width in pixels.<br>
 * @param screenHeight The current screen height in pixels.<br>
 * @param dpToPX The value used for converting display independent pixels (dp) to pixels (px).<br>
 * @return The custom Popup bitmap.
 */
-(NTBitmap*)drawBitmap: (NTScreenPos*)anchorScreenPos screenWidth: (float)screenWidth screenHeight: (float)screenHeight dpToPX: (float)dpToPX;
/**
 * Returns the horizontal anchor point of this popup.<br>
 * @return The horizontal anchor point of this popup.
 */
-(float)getAnchorPointX;
/**
 * Returns the vertical anchor point of this popup.<br>
 * @return The vertical anchor point of this popup.
 */
-(float)getAnchorPointY;
/**
 * Sets the anchor point for the popup. It should only be called from<br>
 * Popup::drawBitmap method, to match the anchor point to the drawn bitmap. <br>
 * Values will be clamped to [-1, 1] range.<br>
 * @param anchorPointX The new horizontal anchor point for the popup. -1 means the left side,<br>
 * 0 the center and 1 the right side of the popup. The default is 0.<br>
 * @param anchorPointY The vertical anchor point for the popup. -1 means the bottom,<br>
 * 0 the center and 1 the top of the popup. The default is -1.
 */
-(void)setAnchorPointX: (float)anchorPointX anchorPointY: (float)anchorPointY;
/**
 * Returns the style of this Popup.<br>
 * @return The style that defines what this Popup looks like.
 */
-(NTPopupStyle*)getStyle;
/**
 * Sets the style for this Popup.<br>
 * @return The new style that defines what this popup looks like.
 */
-(void)setStyle: (NTPopupStyle*)style;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

