/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTPackageMetaInfo.h"
#import "NTPackageTileMask.h"
#import "NTStringVector.h"

/**
 * Information about map package. This includes id, version, name, description and size.
 */
__attribute__ ((visibility("default"))) @interface NTPackageInfo : NSObject
{
  void *swigCPtr;
  BOOL swigCMemOwn;
}
-(void*)getCptr;
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**  
 * Checks if this object is equal to the specified object.
 * @return True when objects are equal, false otherwise.
 */
-(BOOL)isEqual:(id)object;

/**
 * Returns the hash value of this object.
 * @return The hash value of this object.
 */
-(NSUInteger)hash;

/**
 * Constructs a new package info instance.<br>
 * @param packageId The unique id of the package<br>
 * @param version The increasing version number of the package<br>
 * @param size Size of the package in bytes<br>
 * @param serverUrl Location of the package<br>
 * @param tileMask The tile mask of the package<br>
 * @param metaInfo Package meta info
 */
-(id)initWithPackageId: (NSString*)packageId version: (int)version size: (unsigned long long)size serverUrl: (NSString*)serverUrl tileMask: (NTPackageTileMask*)tileMask metaInfo: (NTPackageMetaInfo*)metaInfo;
/**
 * Returns the internal package id. This should not be displayed to the user.<br>
 * @return The unique package id
 */
-(NSString*)getPackageId;
/**
 * Returns the package version. This should not be displayed to the user.<br>
 * @return The increasing package version number
 */
-(int)getVersion;
/**
 * Returns the default name (short description) of the package. It is better to use getNames method instead, as each package may contain multiple names.<br>
 * The name returned is generic name or if that is not available, then English name.<br>
 * @return The list of names for the package in the specified language (if not available, generic/English names are returned)
 */
-(NSString*)getName;
/**
 * Returns the names (short description) of the package. This can be displayed to the user. Each package may have multiple names, if the package has multiple classifications.<br>
 * Note: this information is dervied from package meta info, "name_XXX" fields.<br>
 * @param lang The language for the name<br>
 * @return The list of names for the package in the specified language (if not available, generic/English names are returned)
 */
-(NTStringVector*)getNames: (NSString*)lang;
/**
 * Returns the size of the package in bytes. This can be displayed to the user.<br>
 * @return The size of the package in bytes
 */
-(unsigned long long)getSize;
/**
 * Returns the encoded tile mask of the package. This should not be displayed to the user.<br>
 * @return The tile mask of the package
 */
-(NTPackageTileMask*)getTileMask;
/**
 * Returns package meta info. If package contains no meta info, null is returned.<br>
 * @return The package meta info.
 */
-(NTPackageMetaInfo*)getMetaInfo;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

